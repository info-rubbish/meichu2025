/*
 Generated by typeshare 1.13.3
*/

export interface ChatDeleteReq {
	id: number;
}

export interface ChatDeleteResp {
	deleted: boolean;
}

export enum ChatPaginateReqOrder {
	Asc = "asc",
	Desc = "desc",
}

export interface ChatPaginateReq {
	/**
	 * default to i32::MAX
	 * that is, from last to first
	 */
	id?: number;
	order: ChatPaginateReqOrder;
	limit: number;
}

export interface ChatPaginateRespList {
	id: number;
	model_id: number;
	title: string;
}

export interface ChatPaginateResp {
	list: ChatPaginateRespList[];
}

export interface ChatReadReq {
	id: number;
}

export interface ChatReadResp {
	model_id: number;
	title: number;
}

export enum ErrorKind {
	Unauthorized = "unauthorized",
	MalformedToken = "malformed_token",
	MalformedRequest = "malformed_request",
	Internal = "internal",
	LoginFail = "login_fail",
	ResourceNotFound = "resource_not_found",
}

export interface Error {
	error: ErrorKind;
	reason: string;
}

export interface LoginReq {
	username: string;
	password: string;
}

export interface LoginResp {
	token: string;
	exp: string;
}

export interface MessageCreateReq {
	/** chat room id */
	id: number;
	text: string;
}

export interface MessageCreateResp {
	id: number;
}

export enum MessagePaginateReqOrder {
	Asc = "asc",
	Desc = "desc",
}

export interface MessagePaginateReq {
	/**
	 * default to i32::MAX
	 * that is, from last to first
	 */
	id?: number;
	order: MessagePaginateReqOrder;
	limit: number;
}

export enum MessagePaginateRespRole {
	User = "user",
	Assistant = "assistant",
	Think = "think",
}

export interface MessagePaginateRespList {
	id: number;
	text: string;
	role: MessagePaginateRespRole;
}

export interface MessagePaginateResp {
	list: MessagePaginateRespList[];
}

export interface MessageWriteReq {
	/** message id */
	id: number;
	text: string;
}

export interface ModelCreateReq {
	config: string;
}

export interface ModelCreateResp {
	id: number;
}

export interface ModelDeleteReq {
	id: number;
}

export interface ModelDeleteResp {
	deleted: boolean;
}

export interface ModelReadReq {
	id: number;
}

export interface ModelReadRespCapability {
	image: boolean;
	audio: boolean;
	ocr: boolean;
}

export interface ModelReadResp {
	name: string;
	capability: ModelReadRespCapability;
	config: string;
}

export interface ModelWriteReq {
	id: number;
	config: string;
}

export interface ModelWriteResp {
}

export interface RenewReq {
	token: string;
}

export interface RenewResp {
	token: string;
}

export interface Resp {
}

export interface SseReq {
	id: number;
}

export interface SseRespStart {
	/** Chat room id */
	id: number;
}

export interface UserCreateReq {
	username: string;
	password: string;
}

export interface UserCreateResp {
	user_id: number;
}

export interface UserDeleteReq {
	user_id: number;
}

export interface UserDeleteResp {
	deleted: boolean;
}

export interface UserInfoReq {
	/** If omit will use the current user instead */
	user_id?: number;
}

export interface UserInfoResp {
	user_id: number;
	username: string;
}

export type SseResp = 
	/**
	 * If no streaming message
	 * use this to get old message
	 */
	| { t: "last", c: number }
	/** start a streaming */
	| { t: "start", c: SseRespStart }
	/** token */
	| { t: "token", c: string }
	/**
	 * End of the streaming message
	 * next token will be `Start`
	 */
	| { t: "end", c?: undefined };

