/*
 Generated by typeshare 1.13.3
*/

export interface ChatCreateReq {
	model_id: number;
}

export interface ChatCreateResp {
	id: number;
}

export interface ChatDeleteReq {
	id: number;
}

export interface ChatDeleteResp {
	deleted: boolean;
}

export interface ChatHaltReq {
	id: number;
}

export interface ChatHaltResp {}

export enum ChatPaginateReqOrder {
	/** greater than */
	Gt = 'gt',
	/** less than */
	Lt = 'lt'
}

export interface ChatPaginateReqLimit {
	/**
	 * Default to the beginning
	 * For Gt => minimum id
	 * For Le => maximum id
	 */
	id?: number;
	order: ChatPaginateReqOrder;
	limit?: number;
}

/**
 * Does not include upper & lower
 * lower [... return items ... ] upper
 */
export interface ChatPaginateReqRange {
	upper: number;
	lower: number;
}

export interface ChatPaginateRespList {
	id: number;
	model_id: number;
	title: string;
}

export interface ChatPaginateResp {
	list: ChatPaginateRespList[];
}

export interface ChatReadReq {
	id: number;
}

export interface ChatReadResp {
	model_id: number;
	title: number;
}

export enum ErrorKind {
	Unauthorized = 'unauthorized',
	MalformedToken = 'malformed_token',
	MalformedRequest = 'malformed_request',
	Internal = 'internal',
	LoginFail = 'login_fail',
	ResourceNotFound = 'resource_not_found',
	ApiFail = 'api_fail'
}

export interface Error {
	error: ErrorKind;
	reason: string;
}

export interface LoginReq {
	username: string;
	password: string;
}

export interface LoginResp {
	token: string;
	exp: string;
}

export interface MessageCreateReq {
	chat_id: number;
	text: string;
}

export interface MessageCreateResp {
	id: number;
}

export enum MessagePaginateReqOrder {
	/** greater than */
	Gt = 'gt',
	/** less than */
	Lt = 'lt'
}

export interface MessagePaginateReqLimit {
	chat_id: number;
	/** default to i32::MAX */
	id?: number;
	order: MessagePaginateReqOrder;
	limit?: number;
}

/**
 * Does not include upper & lower
 * lower [... return items ... ] upper
 */
export interface MessagePaginateReqRange {
	chat_id: number;
	upper: number;
	lower: number;
}

export enum MessagePaginateRespRole {
	User = 'user',
	Assistant = 'assistant',
	Think = 'think'
}

export interface MessagePaginateRespList {
	id: number;
	text: string;
	role: MessagePaginateRespRole;
}

export interface MessagePaginateResp {
	list: MessagePaginateRespList[];
}

export interface MessageWriteReq {
	/** message id */
	id: number;
	text: string;
}

export enum OcrEngine {
	Native = 'Native',
	Text = 'Text',
	Mistral = 'Mistral',
	Disabled = 'Disabled'
}

export interface ModelCapability {
	image?: boolean;
	audio?: boolean;
	ocr?: OcrEngine;
}

export interface ModelCheckReq {
	config: string;
}

export interface ModelCheckResp {
	reason?: string;
}

export interface ModelConfig {
	display_name: string;
	openrouter_id: string;
	capability?: ModelCapability;
}

export interface ModelCreateReq {
	config: string;
}

export interface ModelCreateResp {
	id: number;
	display_name: string;
}

export interface ModelDeleteReq {
	id: number;
}

export interface ModelDeleteResp {
	deleted: boolean;
}

export interface ModelList {
	id: number;
	display_name: string;
}

export interface ModelListReq {}

export interface ModelListResp {
	list: ModelList[];
}

export interface ModelReadReq {
	id: number;
}

export interface ModelReadResp {
	raw: string;
}

export interface ModelWriteReq {
	id: number;
	config: string;
}

export interface ModelWriteResp {}

export interface RenewReq {
	token: string;
}

export interface RenewResp {
	token: string;
	exp: string;
}

export interface Resp {}

export interface SseReq {
	id: number;
}

export interface SseRespEnd {
	id: number;
}

export interface SseRespLast {
	id: number;
	version: number;
}

export interface SseRespToken {
	text: string;
}

export interface SseRespUserMessage {
	id: number;
	text: string;
}

export interface UserCreateReq {
	username: string;
	password: string;
}

export interface UserCreateResp {
	user_id: number;
}

export interface UserDeleteReq {
	user_id: number;
}

export interface UserDeleteResp {
	deleted: boolean;
}

export interface UserList {
	id: number;
	name: string;
}

export interface UserListReq {}

export interface UserListResp {
	list: UserList[];
}

export interface UserPreference {
	theme?: string;
	locale?: string;
	submit_on_enter?: string;
}

export interface UserReadReq {
	/** If omit will use the current user instead */
	user_id?: number;
}

export interface UserReadResp {
	user_id: number;
	username: string;
	preference: UserPreference;
}

export interface UserUpdateReq {
	/** If omit will use the current user instead */
	user_id?: number;
	preference?: UserPreference;
	password?: string;
}

export interface UserUpdateResp {
	user_id: number;
}

export type ChatPaginateReq =
	| { t: 'limit'; c: ChatPaginateReqLimit }
	| { t: 'range'; c: ChatPaginateReqRange };

export type MessagePaginateReq =
	| { t: 'limit'; c: MessagePaginateReqLimit }
	| { t: 'range'; c: MessagePaginateReqRange };

/**
 * When connect, the respond will be `Last -> [[Token] -> Enc -> UserMessage]`
 * When update the message, the respond will be `Last -> UserMessage(updated) -> [[Token] -> Enc -> UserMessage]`
 */
export type SseResp =
	/**
	 * When connect to SSE, the first respond will be this
	 * Use this to get old message
	 */
	| { t: 'last'; c: SseRespLast }
	/** token */
	| { t: 'token'; c: SseRespToken }
	/**
	 * End of the streaming message
	 * next token will be `Start`
	 */
	| { t: 'end'; c: SseRespEnd }
	/** The message sent by user */
	| { t: 'user_message'; c: SseRespUserMessage };
